#!/usr/bin/env ruby

require 'ollama'
include Ollama
require 'utils'

# Executes a shell command and returns its output.
#
# This method runs the provided command in a shell environment and captures its
# standard output. If the command fails (returns a non-zero exit status), it
# raises an exception with details about the failure.
#
# @param cmd [ String ] the shell command to be executed
#
# @return [ String ] the standard output of the executed command
#
# @raise [ RuntimeError ] if the executed command returns a non-zero exit status
def x(cmd)
  output = `#{cmd}`
  $?.success? or fail "failed to execute #{cmd.inspect}"
  output
end

# Finds the highest version tag from a CHANGES file by parsing version strings
# in YYYY-MM-DD vMAJOR.MINOR.PATCH format.
#
# This method reads through the specified file line by line, extracting version
# tags that match the pattern "## YYYY-MM-DD vMAJOR.MINOR.PATCH" and determines
# the highest version number among them.
#
# @param filename [ String ] the path to the file containing version tags
#
# @return [ String, nil ] the highest version string found in the file, or nil
# if no valid version tags are present
def find_highest_version_tag(filename)
  File.open(filename, ?r) do |input|
    tags = []
    input.each do |line|
      line.scan(/^## \d{4}-\d{2}-\d{2} v(\d+\.\d+\.\d+)$/) do
        tags << $1
      end
    end
    tags.map(&:version).max
  end
end

# The compute_change method generates a changelog entry by processing Git log
# information and using an LLM to create a formatted summary.
#
# This method takes two range parameters, computes the Git log between them,
# retrieves the commit date, and then uses an LLM to generate a human-readable
# changelog entry based on configuration files and prompt templates.
#
# @param range_from [ Object ] the starting point of the Git log range
# @param range_to [ Object ] the ending point of the Git log range
#
# @return [ String ] a formatted changelog entry including the date and LLM-generated content
def compute_change(range_from, range_to)
  range_from = range_from.to_s.sub(/\Av?/, ?v)
  if range_to.to_s == 'HEAD'
    range = "#{range_from}..HEAD"
  else
    range_to = range_to.to_s.sub(/\Av?/, ?v)
    range = "#{range_from}..#{range_to}"
  end

  log = x("git log #{range}")
  $?.success? or exit 1

  date = x("git log -n1 --pretty='format:%cd' --date=short #{range_to}")

  if log.strip.empty?
    return <<~EOT

    ## #{date} #{range_to}
    EOT
  end

  config = Utils::ConfigDir.new('changes', env_var: 'XDG_CONFIG_HOME')

  base_url      = ENV['OLLAMA_URL'] || 'http://%s' % ENV.fetch('OLLAMA_HOST')
  model         = ENV.fetch('OLLAMA_MODEL', 'llama3.1')
  system        = File.read("#{config}/system.txt")
  prompt        = File.read("#{config}/prompt.txt") + "\n\n#{log}\n"
  client_config = Client::Config.load_from_json("#{config}/client.json")
  client_config.base_url = base_url

  if ENV['DEBUG'].to_i == 1
    STDERR.puts "system:\n#{system}"
    STDERR.puts "prompt:\n#{prompt}"
  end

  ollama  = Client.configure_with(client_config)
  options = Options.load_from_json "#{config}/options.json"
  changes = ollama.generate(model:, system:, prompt:, options:, stream: false, think: false)
  changes = changes.response.gsub(/\t/, '  ')

  return <<~EOT

    ## #{date} #{range_to}

    #{changes}
  EOT
end

x("git fetch --tags")

case command = ARGV.shift
when 'pending'
  last_version = x("git tag").lines.grep(/^v?\d+\.\d+\.\d+$/).map(&:chomp).map {
    _1.sub(/\Av/, '').version
  }.max
  if last_version
    puts compute_change(last_version, :HEAD)
  else
    fail 'need at least one version tag to work'
  end
when 'current'
  version1, version2 = x("git tag").lines.grep(/^v?\d+\.\d+\.\d+$/).map(&:chomp).map {
    _1.sub(/\Av/, '').version
  }.sort.last(2)
  if version1 and version2
    puts compute_change(version1, version2)
  else
    fail 'need at least two version tags to work'
  end
when 'range'
  range = ARGV.shift
  if range =~ /\A(.+)\.\.(.+)\z/
    range_from, range_to = $1, $2
    puts compute_change(range_from, range_to)
  else
    fail "need range of the form v1.2.3..v1.2.4"
  end
when 'full', 'add'
  ary = []
  tags = x("git tag").lines.grep(/^v?\d+\.\d+\.\d+$/).map(&:chomp).map {
    _1.sub(/\Av/, '').version
  }.sort
  if command == 'full'
    date = x("git log -n1 --pretty='format:%cd' --date=short v#{tags.first}").chomp
    ary << <<~EOT

      ## #{date} v#{tags.first}

        * Start
    EOT
    tags.each_cons(2) do |range_from, range_to|
      ary << compute_change(range_from, range_to)
    end
    ary.reverse!
    ary.unshift <<~EOT
      # Changes
    EOT
    puts ary
  else
    filename = ARGV.shift or fail 'need file to add to'
    start_tag = find_highest_version_tag(filename)
    tags = tags.drop_while { |t| t < start_tag }
    ary = []
    tags.each_cons(2) do |range_from, range_to|
      ary << compute_change(range_from, range_to)
    end
    ary.empty? and exit
    ary.reverse!
    File.open(filename) do |input|
      File.secure_write(filename) do |output|
        start_add = nil
        input.each do |line|
          if start_add.nil? && line =~ /^# Changes$/
            start_add = true
            output.puts line
            next
          end
          if start_add && line =~ /^$/
            ary.each do |change|
              STDERR.puts change
              output.puts change
            end
            output.puts line
            start_add = false
            next
          end
          output.puts line
        end
      end
    end
  end
else
  puts <<~end
    Usage: #{File.basename($0)} help|range|full|add|pending
  end
end
