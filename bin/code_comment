#!/usr/bin/env ruby

require 'ollama'
include Ollama
require 'utils'
include Utils::XDGConfig

def fetch_method(filename_linenumber)
  result = ''
  source_location = filename_linenumber.source_location
  lf = Tins::LinesFile.for_filename(source_location.filename, source_location.linenumber)
  if spaces = lf.match_backward(/^(\s*|.*?(private|protected)\s+)def\s+(?:\S+?)(?:\(|\s*$)/)&.first
    line_number_begin = lf.line_number
    lf.match_forward(/^#{spaces}end/)
    line_number_end = lf.line_number
    line_number_begin.upto(line_number_end) do |line_number|
      lf.line_number = line_number
      result << lf.line
    end
  end
  result
end

def fetch_file(filename_linenumber)
  source_location = filename_linenumber.source_location
  File.read(source_location.filename)
end

filename_linenumber = ARGV.shift or fail "require file_name as second argument"
method              = fetch_method(filename_linenumber)
method_indent       = method[/\A( *)/, 1].size
#file                = fetch_file(filename_linenumber)
files               = Dir['{lib,spec,test}/**/*.rb']
base_url            = ENV['OLLAMA_URL'] || 'http://%s' % ENV.fetch('OLLAMA_HOST')
model               = ENV.fetch('OLLAMA_MODEL', 'llama3.1')
#file                = File.read(file_name)
#call_sites          = %x(cscope -L -3 "#{method_name}" $(find . -name '*.rb') | awk '{ print $1 ":" $3 }').lines.map(&:chomp).uniq
#methods             = call_sites.map { fetch_method(_1) } * ?\n

cheatsheet = <<EOT
Documenting Code with YARD

By default, YARD is compatible with the same RDoc syntax most Ruby developers
are already familiar with. However, one of the biggest advantages of YARD is
the extended meta-data syntax, commonly known as "tags", that you can use to
express small bits of information in a structured and formal manner. While RDoc
syntax expects you to describe your method in a completely free-form manner,
YARD recommends declaring your parameters, return types, etc. with the @tag
syntax, which makes outputting the documentation more consistent and easier to
read. Consider the RDoc documentation for a method to_format:

# Converts the object into textual markup given a specific `format`
# (defaults to `:html`)
#
# == Parameters:
# format::
#   A Symbol declaring the format to convert the object to. This
#   can be `:text` or `:html`.
#
# == Returns:
# A string representing the object in a specified
# format.
#
def to_format(format = :html)
  # format the object
end

While this may seem easy enough to read and understand, it's hard for a machine
to properly pull this data back out of our documentation. Also we've tied our
markup to our content, and now our documentation becomes hard to maintain if we
decide later to change our markup style (maybe we don't want the ":" suffix on
our headers anymore).

In YARD, we would simply define our method as:

# Converts the object into textual markup given a specific format.
#
# @param format [Symbol] the format type, `:text` or `:html`
# @return [String] the object converted into the expected format.
# @raise [CannotFormatException] the object cannot be formatted
def to_format(format = :html)
  # format the object
end

Using tags we can add semantic metadata to our code without worrying about
presentation. YARD will handle presentation for us when we decide to generate
documentation later.
EOT

system = <<EOT
Provide high-quality YARD comments for the given Ruby method, including a brief
description of its purpose, parameters, raised exceptions (and why), and
return values, assuming an expert-level understanding of the programming
concepts involved.
EOT
system = nil

prompt = <<EOT
Look at this code to document it:

#{files.map { File.read(_1) } * ?\n}

Here's an example for how you should document a method.

    # The foo method computes the bar result by processing…
    # then it returns the result.
    #
    # @param first [ String ] the foo string
    # @param second [ Integer ] the number of bars lengthy detailed mutltiline
    #                           detailed explanation including a newline.
    # @param third [ TrueClass, FalseClass ]
    #
    # @yield [ a, b ]
    #
    # @raise [ ArgumentError ] if block argument wasn't provided
    # @raise [ ArgumentError ] if second parameter was too small.
    #
    # @example
    #   bar.foo("blub", 4) { |a, b| … } #=> …
    #
    # @return [ ProcessResult ]
    def foo(first, second, third: false, &block)
      block or raise ArgumentError, 'no &block'
      a = first * 2
      if second < 0
        raise ArgumentError, 'too small'
      end
      b = "foo" * second
      if third
        a = a * b
      end
      block_result = block.(a, b)
      result = process block_result
      return result
    end

And this is the method you should document:

#{method}

Output a YARD comment for this method:

Format requirements:

1. Focus on providing a description of the method's purpose, without including any code snippets.
2. Never use `, `ruby, ```, ```ruby in your response.
3. Never add any other remarks or explanation to your response.
4. Start each line of your comment with a single # character.
EOT

options = Ollama::Options.new(
  #repeat_penalty: 1.8,
  num_ctx: 16384,
  num_predict: 512,
  temperature: 0,
  #repeat_last_n: -1,
  ##seed: 1337,
  top_p: 1,
  min_p: 0.1,
)

if ENV['DEBUG'].to_i == 1
  File.open('debug.log', ?w) do |log|
    log.puts "system:\n#{system}"
    log.puts "prompt:\n#{prompt}"
    log.puts "filename_linenumber: #{filename_linenumber}"
    log.puts JSON.pretty_generate(options)
  end
end

config = xdg_config('code_comment')
client_config = Client::Config.load_from_json "#{config}/client.json"
client_config.base_url = base_url
ollama   = Client.configure_with(client_config)
response = ollama.generate(model:, system:, prompt:, options:, stream: false, think: false).response
puts response.gsub(/^/) { ' ' * method_indent }
