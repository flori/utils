#!/usr/bin/env ruby

require 'ollama'
include Ollama
require 'utils'

META_METHOD = /(
  (class_)?                   # Optional "class_" prefix
  attr(                       # "attr" keyword
    _reader|                  # reader variant
    _writer|                  # writer variant  
    _accessor                 # accessor variant
  )?                          # Optional variant
  |                           # OR
  dsl_(accessor|reader)       # DSL accessor patterns
  |                           # OR
  constant                    # Constant definitions
  |                           # OR
  config                      # config settings
  |                           # OR
  (instance_)?                # Optional "instance_" prefix
  thread(                     # "thread" keyword
    _local|                    # local variant
    _global                   # global variant
  )?                          # Optional variant
)\s+:/x

# Fetches the method definition from a given filename and line number.
#
# This method retrieves the source code of a method by analyzing the file
# location and line number provided. It attempts to identify the method
# definition by examining the surrounding context, including handling
# private and protected method declarations.
#
# @param filename_linenumber [ Object ] an object that responds to #source_location
#                                       and provides filename and line number information
#
# @return [ String ] the source code of the method definition, or an empty string
#                    if the method cannot be determined
def fetch_method(filename_linenumber)
  result = ''
  source_location = filename_linenumber.source_location
  lf = Tins::LinesFile.for_filename(source_location.filename, source_location.linenumber)
  if lf.line =~ META_METHOD
    return lf.line
  end
  if spaces = lf.match_backward(/^(\s*?)(\S.*?\s+)?def\s+/)&.first
    line_number_begin = lf.line_number
    lf.match_forward(/^#{spaces}end/)
    line_number_end = lf.line_number
    line_number_begin.upto(line_number_end) do |line_number|
      lf.line_number = line_number
      result << lf.line
    end
  end
  result
end

filename_linenumber = ARGV.shift or fail "require file_name as second argument"
config              = Utils::ConfigDir.new('code_comment', env_var: 'XDG_CONFIG_HOME')
method              = fetch_method(filename_linenumber)
method_indent       = method[/\A( *)/, 1].size
files               = Dir['{lib,spec,test}/**/*.rb']
base_url            = ENV['OLLAMA_URL'] || 'http://%s' % ENV.fetch('OLLAMA_HOST')
model               = ENV.fetch('OLLAMA_MODEL', 'llama3.1')
#call_sites          = %x(cscope -L -3 "#{method_name}" $(find . -name '*.rb') | awk '{ print $1 ":" $3 }').lines.map(&:chomp).uniq
#methods             = call_sites.map { fetch_method(_1) } * ?\n

default_system = <<EOT
Provide high-quality YARD comments for the given Ruby method, including a brief
description of its purpose, parameters, raised exceptions (and why), and
return values, assuming an expert-level understanding of the programming
concepts involved.
EOT
system = config.read('system.txt', default: default_system)

file_contents = files.map { _1 + ":\n" + File.read(_1) } * ?\n
default_prompt = <<EOT
Look at this code to document it:

%{file_contents}

Here's an example for how you should document a method.

  # The foo method computes the bar result by processingâ€¦
  # then it returns the result.
  #
  # @param first [ String ] the foo string
  # @param second [ Integer ] the number of bars lengthy detailed mutltiline
  #                           detailed explanation including a newline.
  # @param third [ TrueClass, FalseClass ]
  #
  # @yield [ a, b ]
  #
  # @raise [ ArgumentError ] if block argument wasn't provided
  # @raise [ ArgumentError ] if second parameter was too small.
  #
  # @return [ ProcessResult ]

And this is the method you should document:

%{method}

Output a YARD comment for this method:

Format requirements:

1. Focus on providing a description of the method's purpose
   without including any code snippets.
2. You should ommit the @raise if you are not sure.
3. Never use `, `ruby, ```, ```ruby in your response.
4. Never add any other remarks or explanation to your response.
5. Start each line of your comment with a single # character.
EOT
prompt = config.read('prompt.txt', default: default_prompt) % {
  method:, file_contents:,
}

default_options = JSON(
  #repeat_penalty: 1.8,
  num_ctx: 16384,
  num_predict: 512,
  temperature: 0,
  #repeat_last_n: -1,
  ##seed: 1337,
  top_p: 1,
  min_p: 0.1,
)

client_config = Client::Config.load_from_json config + 'client.json'
client_config.base_url = base_url
ollama  = Client.configure_with(client_config)
options = JSON.parse(config.read('options.json', default: default_options))

if ENV['DEBUG'].to_i == 1
  File.open('debug.log', ?w) do |log|
    log.puts "system:\n#{system}"
    log.puts "prompt:\n#{prompt}"
    log.puts "filename_linenumber: #{filename_linenumber}"
    log.puts JSON.pretty_generate(options)
  end
end

response = ollama.generate(model:, system:, prompt:, options:, stream: false, think: false).response
puts response.gsub(/^/) { ' ' * method_indent }
