#!/usr/bin/env ruby

require 'utils'
include Utils
require 'tins/xt'
include Tins::GO
require 'search_ui'
include SearchUI
require 'pathname'

def edit_files(*paths, pick: false, wait: true)
  editor = Utils::Editor.new
  if pick
    if paths.size > 1
      path = complete(prompt: 'Pick? ') do |p|
        paths.grep(/#{p}/)
      end
    else
      path = paths.first
    end
    editor.edit(path.strip)
  else
    editor.wait = wait
    editor.edit(*paths)
  end
end

def usage
  puts <<-EOT
Usage: #{File.basename($0)} [OPTS] [PATTERN] [PATHS]

PATTERN is a pattern expression which is find the files. PATHS are the
directory and file paths that are searched.

Options are

  -pX         interpret PATTERN argument as X=r for regexp or X=f for fuzzy
  -r          reset the search index
  -c          disable color output
  -e          open the matching files with edit command
  -E          pick one file to edit
  -a CSET     use only character set CSET from PATTERN
  -iX         use case insensitive matches with X=y (default) or not with X=n
  -I SUFFIX   only include files with suffix SUFFIX during finding
  -d          match also directories
  -D          list all search leaf directories
  -v          be verbose
  -n NUMBER   the first NUMBER of matches is returned
  -s          search by interactively inputting PATTERN
  -l          list all paths in cache relative to current directory
  -L          list all paths in cahce as absolute pathes from root
  -h          display this help

Version is #{File.basename($0)} #{Utils::VERSION}.
  EOT
  exit 1
end

args = go 'n:I:i:a:p:lLcreEvdsDh', defaults: { ?a => '\\w' }
args[?h] and usage

Term::ANSIColor.coloring = (STDIN.tty? && ENV['TERM'] !~ /dumb/) && !args[?c]
STDOUT.sync = true
config = Utils::ConfigFile.new
config.configure_from_paths
args[?b] ||= config.discover.binary
args[?n] ||= (args[?l] || args[?L]) ? 1 << 60 : config.discover.max_matches

if args[?s]
  pattern = ''
else
  pattern = ARGV.shift || ''
end
roots = (ARGV.empty? ? [ Dir.pwd ] : ARGV).map { |f| File.expand_path(f) }

finder = -> * {
  Finder.new(
    :pattern => pattern,
    :args    => args,
    :roots   => roots,
    :config  => config
  )
}

search = -> * {
  f = nil
  pattern = pattern.dup
  args[?n] = Term::ANSIColor.terminal_lines - 1
  found = Search.new(
    match: -> answer {
      pattern.replace answer
      f = finder.()
      matches = f.search.output
      matches.first(Tins::Terminal.lines - 1)
    },
    query: -> _answer, matches, selector {
      matches.each_with_index.map { |l, i| (i == selector ? '> ' : '  ') + l }.join(?\n)
    },
    found: -> _answer, matches, selector {
      f.paths[selector] if f
    },
    output: STDERR
  ).start
  if found
    if args[?e]
      edit_files found, wait: false
    else
      found and puts found
    end
    exit 0
  else
    exit 1
  end
}

case
when args[?l]
  puts finder.().search_index.paths.map {
    Pathname.new(_1).expand_path.relative_path_from(Dir.pwd)
  }
when args[?L]
  puts finder.().search_index.paths
when args[?s]
  search.()
when args[?E]
  edit_files(*finder.().paths, pick: true)
when args[?e]
  edit_files(*finder.().search.paths)
when args[?D]
  args[?d] = true
  paths = finder.().load_paths.select { |p| File.directory?(p) }.reverse
  leaf_dirs = []
  until paths.empty?
    path = paths.shift
    unless leaf_dirs.any? { |ld| ld.start_with?(path) }
      leaf_dirs.push path
    end
  end
  puts leaf_dirs
when pattern.empty? && args[?r]
  finder.()
  exit
when pattern.empty?
  args[?e] = true
  search.()
else
  puts finder.().search.output
end
