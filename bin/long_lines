#!/usr/bin/env ruby
#
# Find lines exceeding maximum length threshold with author attribution
# Usage: #{File.basename($0)} [OPTIONS] [FILES]
# Options:
#   -m NUM  Maximum line length (default: 80)
#   -h      Show this help message
#
# Outputs tab-separated data: AUTHOR\tLINE_LENGTH\tFILE:LINE_NUMBER
# for each line longer than the specified threshold.

require 'tins/go'
include Tins::GO
require 'utils'
require 'term/ansicolor'

$opts = go 'm:h', defaults: { ?m => default_m = 80 }

if $opts[?h]
  puts <<~USAGE
    #{File.basename($0)} [OPTIONS] [FILES]

    Options:
      -m NUM  Maximum line length (default: #{default_m})
      -h      Show this help message

  USAGE
  exit
end

max = $opts[?m].to_i
files = ARGV

files.each do |file|
  File.open(file) do |f|
		f.each do |line|
      size = line.size
      if size > max
        lineno = f.lineno
        blamer = Utils::LineBlamer.new(file, lineno) or next
        blame = blamer.perform or next
        author = (blame[/\((.*?)\d{4}/, 1] || 'unknown').strip
        puts [ author, size, "#{file}:#{lineno}" ] * ?\t
      end
    end
  end
end
