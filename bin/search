#!/usr/bin/env ruby
# encoding: UTF-8

require 'utils'
include Utils
require 'tins/go'
include Tins::GO

def convert_ruby_to_vim_regexp(pattern)
  regexp = pattern.source.dup
  regexp.gsub!(/([^\\])\?/, '\1\\?')
  pattern.casefold? and regexp << '\c'
  regexp
end

def edit_files(pattern, paths)
  editor = Utils::Editor.new do |config|
    config.wait = true
  end
  editor.edit_remote_send("<ESC>/#{convert_ruby_to_vim_regexp(pattern)}<CR>")
  for path in paths
    STDERR.puts "Edit #{path}"
    editor.edit(path)
  end
end

def usage
  puts <<-EOT
Usage: #{File.basename($0)} [OPTS] PATTERN [PATHS]

PATTERN is a pattern expression which is used to match against the content of
the files. PATHS are the directory and file paths that are searched.

Options are

  -n PATTERN  only search files whose names match fuzzy PATTERN
  -N PATTERN  only search files whose names match regex PATTERN
  -s PATTERN  skip lines that match fuzzy PATTERN
  -S PATTERN  skip lines that match regex PATTERN
  -A NUMBER   displays NUMBER lines of context after the match
  -B NUMBER   displays NUMBER lines of context before the match
  -C NUMBER   displays NUMBER lines of context around the match
  -f          just list the paths of the files that would be searched
  -l          just list the paths of the files with matches
  -L          list only the path:linenumber of the files with matches
  -R          interpret PATTERN argument as fuzzy not regex
  -c          disable color output
  -i          use case insensitive matches
  -I SUFFIX   only include files with suffix SUFFIX in search
  -e          open the matching files with edit command
  -a CSET     use only character set CSET from PATTERN
  -h          display this help

Version is #{File.basename($0)} #{Utils::VERSION}.
  EOT
  exit 1
end

args = go 'I:A:B:C:s:S:n:N:a:RciflLeh'
args['h'] and usage
pattern = ARGV.shift or usage
roots = (ARGV.empty? ? [ Dir.pwd ] : ARGV).map { |f| File.expand_path(f) }

Term::ANSIColor.coloring = (STDIN.tty? && ENV['TERM'] !~ /dumb/) && !args['c']
STDOUT.sync = true
config = Utils::Config::ConfigFile.new
config.parse_config_file File.expand_path('~/.utilsrc')
grepper = Grepper.new(
  :pattern => pattern,
  :args    => args,
  :roots   => roots,
  :config  => config
).search
case
when args['e'] then edit_files grepper.pattern, grepper.paths
when args['l'] then puts grepper.paths
end
