#!/usr/bin/env ruby
#
# Directory Synchronization Tool
#
# This script synchronizes directories with interactive conflict resolution. It
# compares source and destination directories recursively, showing differences
# and prompting for actions when conflicts arise.
#
# Usage:
#   sync_dir <source_directory> [<destination_directory>]
#
# If destination is not specified, current directory is used.
#
# Features:
# - Interactive file comparison with colored diffs
# - Support for copying, editing, deleting, or skipping files
# - Configuration-based skipping of files/directories
# - Vim integration for editing files
# - Colorized output using ANSI escape codes
#
# Actions available when conflicts are detected:
# - c: Copy file to destination
# - e: Edit file with vim
# - d: Delete file from source
# - s: Skip (continue with next file)
# - q: Quit (exit script)

require 'pathname'
require 'fileutils'
include FileUtils::Verbose
require 'utils'
require 'term/ansicolor'
include Term::ANSIColor

$config = Utils::ConfigFile.new
$config.configure_from_paths

# The local_path method computes the relative path from the current directory
# to the specified path.
#
# This method takes an absolute or relative path and returns its relative
# representation with respect to the current working directory.
#
# @param path [ String ] the path to be converted to a relative path
#
# @return [ String ] the relative path from the current directory to the
# specified path
def local_path(path)
  Pathname.new(path).expand_path.relative_path_from(
    Pathname.new(?.).expand_path
  ).to_s
end

# The diff_dir method compares the contents of two directories recursively.
#
# This method executes a shell command to perform a recursive directory
# comparison between the source and destination paths, reporting differences in
# files and subdirectories.
#
# @return [ String ] the output from the diff command showing directory
# differences
def diff_dir
  `diff -rq #{$src.inspect} #{$dst.inspect}`
end

# The ask? method prompts the user for input and returns the trimmed response.
#
# @param prompt [ String ] the message to display to the user
#
# @return [ String ] the user's input with leading and trailing whitespace removed
def ask?(prompt:)
  print prompt
  gets.chomp
end

$src = ARGV.shift or fail "need source directory as first argument"
$src = local_path $src
$dst = ARGV.shift || ?.
$dst = local_path $dst

puts diff_dir

diff_dir.each_line do |line|
  case line
  when /^Only in (.*?): (.*?)$/
    s, d = $~.captures
    sd = local_path(s)
    s  = local_path(File.join(sd, d))
    $config.sync_dir.skip?(s) and next
    dd = [ $src, $dst ].find { _1 != sd }
    d  = local_path(File.join(dd, d))
    if File.file?(s) and File.ascii?(s)
      puts color(214, File.read(s))
    end
    puts " Only found in #{s.inspect} ".center(Tins::Terminal.cols, ?*)
    puts <<~end
      (C)opy #{s.inspect} to #{d.inspect}
      (E)dit #{s.inspect}
      (D)elete #{s.inspect}
      (S)kip
      (Q)uit
    end
    case ask?(prompt: 'action? ')
    when /\Ac/i
      cp s, d
    when /\Ae/i
      system "vim #{s.inspect}"
      redo
    when /\Ad/i
      rm s
    when /\Aq/i
      exit
    end
  when /^Files (.*?) and (.*?) differ$/
    s, d = $~.captures
    s = local_path(s)
    $config.sync_dir.skip?(s) and next
    d = local_path(d)
    puts `diff --color=always -u #{s.inspect} #{d.inspect}`
    puts " Difference found #{s.inspect} #{d.inspect} ".center(Tins::Terminal.cols, ?*)
    puts <<~end
      (V)imdiff
      (S)kip
      (Q)uit
    end
    case ask?(prompt: 'action? ')
    when /\Av/i
      system "vimdiff #{s.inspect} #{d.inspect}"
    when /\Aq/i
      exit
    else
      next
    end
    redo
  end
rescue Interrupt
  exit
end
